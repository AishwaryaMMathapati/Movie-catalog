FRONTEND
1. Angular vs. Plain JavaScript
ðŸ”¹ Modular Structure:

Angular is component-based, meaning the UI is broken into reusable, independent components (e.g., movie cards, search bar, modals).
In contrast, plain JavaScript can become messy and hard to manage as the project grows.
ðŸ”¹ Two-Way Data Binding:

Angular automatically updates the UI when data changes, eliminating the need to manually manipulate the DOM (which is required in JavaScript).
Example: If a user adds a movie to their favorites, Angular updates the UI instantly.
ðŸ”¹ Routing & State Management:

Angularâ€™s built-in router makes it easy to navigate between different pages (Home, Movie Details, Watchlist, etc.).
Plain JavaScript requires manual handling with window.location or external libraries.
ðŸ”¹ Faster Development with TypeScript:

Angular uses TypeScript, which provides static typing and better error detection before execution.
Plain JavaScript lacks strict typing, making debugging harder.
2. SCSS vs. Plain CSS
ðŸ”¹ Better Organization with Nesting:

SCSS allows nested rules, making styles more structured and readable.
Example: Instead of writing separate CSS rules, SCSS allows:
scss
Copy
Edit
.movie-card {
  background-color: #222;
  .title {
    color: white;
    font-size: 18px;
  }
}
In plain CSS, this would require repeated .movie-card .title selectors, making code harder to manage.
ðŸ”¹ Variables for Reusability:

SCSS allows defining variables for colors, fonts, and spacing. Example:
scss
Copy
Edit
$primary-color: #ffcc00;
button {
  background-color: $primary-color;
}
Plain CSS does not support variables (only CSS custom properties, which are less flexible).
ðŸ”¹ Mixins & Functions:

SCSS provides mixins to reuse styles dynamically.
Example: Instead of writing media queries multiple times, you can use:
scss
Copy
Edit
@mixin responsive {
  @media (max-width: 768px) {
    @content;
  }
}
.container {
  width: 100%;
  @include responsive {
    width: 90%;
  }
}
3. Bootstrap & Angular Material vs. Manual UI Design
ðŸ”¹ Pre-Built Responsive Components:

Bootstrap and Angular Material provide ready-made buttons, modals, grids, and form elements.
Saves time compared to designing every component from scratch.
ðŸ”¹ Mobile-First Approach:

These libraries ensure that the UI looks great on all screen sizes without writing separate media queries.
ðŸ”¹ Animations & Accessibility:

Angular Material includes built-in animations and accessibility features that are difficult to implement manually in JavaScript.


CHALLENGES:


ðŸ”¸ Challenge 1: Handling API Rate Limits
Problem:
The TMDB API restricts the number of requests per second. If too many users request data at once, the API might block further requests, leading to missing movie details.

Solution:
âœ” Caching techniques help store frequently requested data temporarily, reducing API calls.

Tools Used:
âœ” Redis â€“ Stores frequently accessed movie data in memory for fast retrieval.
âœ” Local Storage/Session Storage â€“ Saves temporary data in the browser, preventing unnecessary API calls.

Implementation:

When a user requests movie data, check if itâ€™s available in Redis first.
If not, fetch from the TMDB API, store it in Redis, and return the response.
ðŸ”¸ Challenge 2: Secure Authentication
Problem:
User authentication must be secure to prevent unauthorized access.

Solution:
âœ” Use JWT (JSON Web Token) for secure session management.
âœ” Encrypt passwords using bcrypt.js before storing them in the database.

Tools Used:
âœ” JWT (JSON Web Token) â€“ Issues secure access tokens for user authentication.
âœ” bcrypt.js â€“ Hashes and secures user passwords to prevent leaks.

Implementation:

When a user logs in, the server verifies credentials and issues a JWT token.
The token is stored in the frontend and sent with each request to verify the userâ€™s identity.
bcrypt.js hashes passwords before storing them in MySQL, preventing password leaks.
ðŸ”¸ Challenge 3: Efficient Database Queries
Problem:
Fetching large amounts of movie data from MySQL can slow down performance.

Solution:
âœ” Optimize MySQL queries to ensure fast data retrieval.

Tools Used:
âœ” MySQL Indexing â€“ Improves search performance.
âœ” Query Optimization â€“ Uses efficient SQL queries to reduce load times.

Implementation:

Use indexes on frequently searched fields (e.g., movie title, genre).
Implement pagination to fetch only required data instead of loading everything at once.
ðŸ”¸ Challenge 4: UI/UX Considerations
Problem:
The application should be responsive and user-friendly across all devices.

Solution:
âœ” Use modern UI frameworks for a smooth and consistent user experience.

Tools Used:
âœ” Angular Material â€“ Provides pre-built UI components for a professional look.
âœ” Bootstrap â€“ Ensures responsiveness across devices.
âœ” SCSS (CSS Preprocessor) â€“ Enhances styling flexibility and maintainability.

Implementation:

Use Angular Materialâ€™s pre-designed components for buttons, cards, and forms.
Use Bootstrapâ€™s grid system to ensure responsiveness.
Use SCSS variables for consistent styling.